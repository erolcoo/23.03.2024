{"ast":null,"code":"import * as i0 from \"@angular/core\";\nexport class UserService {\n  get isLogged() {\n    return !!this.user;\n  }\n  constructor() {\n    this.USER_KEY = '[user]';\n    try {\n      const lsUser = localStorage.getItem(this.USER_KEY) || '';\n      this.user = JSON.parse(lsUser);\n    } catch (error) {\n      this.user = undefined;\n    }\n  }\n  login(email, password) {\n    // Проверяваме дали имаме потребител със съответния имейл и парола в локалното съхранение\n    const lsUser = localStorage.getItem(this.USER_KEY);\n    if (lsUser) {\n      const userFromStorage = JSON.parse(lsUser);\n      // Проверяваме дали предоставеният имейл и парола съвпадат с тези на потребителя в локалното съхранение\n      if (userFromStorage.email === email && userFromStorage.password === password) {\n        // Ако съвпадат, отбелязваме потребителя като влезнал в системата\n        this.user = userFromStorage;\n        return true;\n      }\n    }\n    // В противен случай, връщаме false, за да покажем, че входът не е успешен\n    return false;\n  }\n  logout() {\n    this.user = undefined;\n    localStorage.removeItem(this.USER_KEY);\n  }\n  register(newUser) {\n    const userToRegister = {\n      email: newUser.email,\n      password: newUser.password\n    };\n    localStorage.setItem(this.USER_KEY, JSON.stringify(userToRegister));\n    this.user = userToRegister;\n  }\n  isUserRegistered(email) {\n    // Проверяваме дали имаме регистриран потребител със съответния email в локалното съхранение\n    const lsUser = localStorage.getItem(this.USER_KEY);\n    if (lsUser) {\n      const userFromStorage = JSON.parse(lsUser);\n      return userFromStorage.email === email;\n    }\n    return false;\n  }\n  deleteAccount() {\n    // Изтриване на потребителя от Local Storage\n    localStorage.removeItem(this.USER_KEY);\n    // Също така изтрийте и свойството user в услугата\n    this.user = undefined;\n  }\n  static #_ = this.ɵfac = function UserService_Factory(t) {\n    return new (t || UserService)();\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: UserService,\n    factory: UserService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["UserService","isLogged","user","constructor","USER_KEY","lsUser","localStorage","getItem","JSON","parse","error","undefined","login","email","password","userFromStorage","logout","removeItem","register","newUser","userToRegister","setItem","stringify","isUserRegistered","deleteAccount","_","_2","factory","ɵfac","providedIn"],"sources":["C:\\SoftUni\\23.03.2024\\src\\app\\user.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { UserForAuth } from './types/user';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class UserService {\n  user: UserForAuth | undefined;\n  USER_KEY = '[user]';\n\n  get isLogged(): boolean {\n    return !!this.user;\n  }\n\n  constructor() {\n    try {\n      const lsUser = localStorage.getItem(this.USER_KEY) || '';\n      this.user = JSON.parse(lsUser);\n    } catch (error) {\n      this.user = undefined;\n    }\n  }\n\n  login(email: string, password: string): boolean {\n    // Проверяваме дали имаме потребител със съответния имейл и парола в локалното съхранение\n    const lsUser = localStorage.getItem(this.USER_KEY);\n    if (lsUser) {\n      const userFromStorage: UserForAuth = JSON.parse(lsUser);\n      // Проверяваме дали предоставеният имейл и парола съвпадат с тези на потребителя в локалното съхранение\n      if (userFromStorage.email === email && userFromStorage.password === password) {\n        // Ако съвпадат, отбелязваме потребителя като влезнал в системата\n        this.user = userFromStorage;\n        return true;\n      }\n    }\n    // В противен случай, връщаме false, за да покажем, че входът не е успешен\n    return false;\n  }\n\n  logout() {\n    this.user = undefined;\n    localStorage.removeItem(this.USER_KEY);\n  }\n\n  register(newUser: UserForAuth){\n    const userToRegister: UserForAuth = {\n      email: newUser.email,\n      password: newUser.password,\n    };\n    localStorage.setItem(this.USER_KEY, JSON.stringify(userToRegister));\n    this.user = userToRegister;\n}\nisUserRegistered(email: string): boolean {\n  // Проверяваме дали имаме регистриран потребител със съответния email в локалното съхранение\n  const lsUser = localStorage.getItem(this.USER_KEY);\n  if (lsUser) {\n    const userFromStorage: UserForAuth = JSON.parse(lsUser);\n    return userFromStorage.email === email;\n  }\n  return false;\n}\ndeleteAccount() {\n  // Изтриване на потребителя от Local Storage\n  localStorage.removeItem(this.USER_KEY);\n  // Също така изтрийте и свойството user в услугата\n  this.user = undefined;\n}\n\n}\n"],"mappings":";AAMA,OAAM,MAAOA,WAAW;EAItB,IAAIC,QAAQA,CAAA;IACV,OAAO,CAAC,CAAC,IAAI,CAACC,IAAI;EACpB;EAEAC,YAAA;IANA,KAAAC,QAAQ,GAAG,QAAQ;IAOjB,IAAI;MACF,MAAMC,MAAM,GAAGC,YAAY,CAACC,OAAO,CAAC,IAAI,CAACH,QAAQ,CAAC,IAAI,EAAE;MACxD,IAAI,CAACF,IAAI,GAAGM,IAAI,CAACC,KAAK,CAACJ,MAAM,CAAC;KAC/B,CAAC,OAAOK,KAAK,EAAE;MACd,IAAI,CAACR,IAAI,GAAGS,SAAS;;EAEzB;EAEAC,KAAKA,CAACC,KAAa,EAAEC,QAAgB;IACnC;IACA,MAAMT,MAAM,GAAGC,YAAY,CAACC,OAAO,CAAC,IAAI,CAACH,QAAQ,CAAC;IAClD,IAAIC,MAAM,EAAE;MACV,MAAMU,eAAe,GAAgBP,IAAI,CAACC,KAAK,CAACJ,MAAM,CAAC;MACvD;MACA,IAAIU,eAAe,CAACF,KAAK,KAAKA,KAAK,IAAIE,eAAe,CAACD,QAAQ,KAAKA,QAAQ,EAAE;QAC5E;QACA,IAAI,CAACZ,IAAI,GAAGa,eAAe;QAC3B,OAAO,IAAI;;;IAGf;IACA,OAAO,KAAK;EACd;EAEAC,MAAMA,CAAA;IACJ,IAAI,CAACd,IAAI,GAAGS,SAAS;IACrBL,YAAY,CAACW,UAAU,CAAC,IAAI,CAACb,QAAQ,CAAC;EACxC;EAEAc,QAAQA,CAACC,OAAoB;IAC3B,MAAMC,cAAc,GAAgB;MAClCP,KAAK,EAAEM,OAAO,CAACN,KAAK;MACpBC,QAAQ,EAAEK,OAAO,CAACL;KACnB;IACDR,YAAY,CAACe,OAAO,CAAC,IAAI,CAACjB,QAAQ,EAAEI,IAAI,CAACc,SAAS,CAACF,cAAc,CAAC,CAAC;IACnE,IAAI,CAAClB,IAAI,GAAGkB,cAAc;EAC9B;EACAG,gBAAgBA,CAACV,KAAa;IAC5B;IACA,MAAMR,MAAM,GAAGC,YAAY,CAACC,OAAO,CAAC,IAAI,CAACH,QAAQ,CAAC;IAClD,IAAIC,MAAM,EAAE;MACV,MAAMU,eAAe,GAAgBP,IAAI,CAACC,KAAK,CAACJ,MAAM,CAAC;MACvD,OAAOU,eAAe,CAACF,KAAK,KAAKA,KAAK;;IAExC,OAAO,KAAK;EACd;EACAW,aAAaA,CAAA;IACX;IACAlB,YAAY,CAACW,UAAU,CAAC,IAAI,CAACb,QAAQ,CAAC;IACtC;IACA,IAAI,CAACF,IAAI,GAAGS,SAAS;EACvB;EAAC,QAAAc,CAAA,G;qBA5DYzB,WAAW;EAAA;EAAA,QAAA0B,EAAA,G;WAAX1B,WAAW;IAAA2B,OAAA,EAAX3B,WAAW,CAAA4B,IAAA;IAAAC,UAAA,EAFV;EAAM","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}